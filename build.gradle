import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        //Defaults to Java 8 & UTF-8 encoding
        classpath "com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT"
    }
}

plugins {
    id("org.ajoberstar.grgit") version("3.1.1")
}

apply plugin: 'forge'
apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)
    setTransitive(false)
}

sourceCompatibility = targetCompatibility = 1.8

version = modVersion
group= modGroup
archivesBaseName = modId

minecraft {
    version = "${minecraftVersion}-${forgeVersion}-${minecraftVersion}"
    runDir = "run"
}

repositories {
    jcenter()
    maven {
        name = "CodeChicken"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name = "appleCore"
        url = "http://www.ryanliptak.com/maven/"
    }
    ivy {
        name = "gtnh_download_source"
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]")
    }
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven/'
    }
}

dependencies {
    compile("com.github.GTNewHorizons:GT5-Unofficial:experimental-SNAPSHOT:dev") {
        setChanging(true)
    }
    compileOnly("org.spongepowered:mixin:0.7.11-SNAPSHOT")
}

ext {
    mixinSrg = new File(project.buildDir, 'mixins/mixin.hydroenergy.srg')
    mixinRefMap = new File(project.buildDir, "mixins/mixins.hydroenergy.json")
}

jar {
    getArchiveFileName().set(archivesBaseName + "-" + project.version + ".jar")
    manifest {
        attributes 'FMLCorePlugin': 'com.sinthoras.hydroenergy.asm.HEPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    from project.mixinRefMap
}

reobf {
    addExtraSrgFile project.mixinSrg
}

compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').canonicalPath}"
    ]
}

task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from plugins.getPlugin("forge").delayedFile('{SRG_DIR}')

    include '**/*.srg'
    into 'build/srgs'
}

compileJava.dependsOn copySrgs

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourcesJar(type: Jar) {
    from (sourceSets.main.allJava)
    from (file("$projectDir/LICENSE"))

    getArchiveClassifier().set('sources')
}

task deobfJar(type: Jar) {
    from (sourceSets.main.output)

    getArchiveClassifier().set('dev')
}

task apiJar(type: Jar) {
    from (sourceSets.main.allJava) {
        include 'com/sinthoras/hydroenergy/api/**'
    }

    from (sourceSets.main.output) {
        include 'com/sinthoras/hydroenergy/api/**'
    }

    from (sourceSets.main.resources.srcDirs) {
        include("LICENSE")
    }

    getArchiveClassifier().set('api')
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
    archives apiJar
}